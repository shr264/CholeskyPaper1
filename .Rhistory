Tj_block <- function(k, Y, xk, lambda){
n = nrow(Y)
fit = lassoshooting(-Y[,1:(k-1), drop=FALSE], xk*Y[,k, drop=FALSE], lambda=n*lambda)
fit$coefficients
}
hk2 <- function(k, A, Y1ddi, lambda, maxitr=100, tol=1e-7){
p <- ncol(A)
xold <- rep(0, p)
xnew <- rep(0, p)
r <- 1
converged <- FALSE
repeat {
xnew[1:(k-1)] <- Tj_block(k, Y1ddi, xnew[k], lambda)
xnew[k] <- Tk(k, A, xnew)
if (max(abs(xnew - xold)) < tol) { break
} else if (r > maxitr) {
cat('coordinate', k, 'did not converge within', maxitr, 'iterations\n')
break
} else {
r <- r + 1 }
xold <- xnew }
xnew
}
CSCS3 <- function( Y, lambda, L=NULL, maxitr=100, tol=1e-7, block_opt=FALSE ){
n <- nrow(Y)
p <- ncol(Y)
if (is.null(L))
L <- diag(p)
S <- (t(Y)%*%Y)/n
if (block_opt) { for (i in 1:p){
L[i,1:i] <- hk2(i, S[1:i, 1:i, drop=FALSE], Y[,1:i, drop=FALSE], 0.5*lambda, maxitr,tol)
}} else {
for (i in 1:p) {
L[i,1:i] <- hk(i, S[1:i, 1:i, drop=FALSE], L[i,1:i], L[i,1:i], lambda, maxitr, tol) }
}
list(L=L) }
CSCS4 <- function( Y, lambda, L=NULL, maxitr=100, tol=1e-7, block_opt=FALSE ){
n <- nrow(Y)
p <- ncol(Y)
if (is.null(L))
L <- diag(p)
S <- (t(Y)%*%Y)/n
for (i in 1:p) {
L[i,1:i] <- hk3(L[i,1:i],i, S[1:i, 1:i, drop=FALSE], lambda, maxitr, tol) }
list(L=L) }
CSCS4(A,2.0,maxitr = 10, tol = 0.001)
CSCS3(A,2.0,maxitr = 10, tol = 0.001, block_opt=FALSE)
CSCS2(Y = A, lambda = 1, maxitr=10, tol=0.001)
CSCS(A,2,maxitr = 100 , tol = 0.00001)
q()
50*4*2
q()
a = 1:5
1/a
sum(1/a)
1/sum(1/a)
b = 1:3
c = b+2
b
c
b/c
sum(b/c)*0.438
sum(b/c)*0.438*0.05
2*(1 - 1/10)+ 1/10
1000^2/2
quadratic <- function(a,b,c){
(-b + c(-1,1)*sqrt(b^2-4*a*c))/(2*a)}
quadratic(1/2,-1000,(1000^2)/2 - 125)
quadratic(1/2,-1000,(1000^2)/2 - 125*1000)
(8/3-4/2)-(1/3-1/2)
b = (16/4-8/3)-(1/4-1/3)
a = (8/3-4/2)-(1/3-1/2)
b - a^2
5/36
ln(0.05)
log(0.05)
-log(0.05)*300
-log(0.05)*300 - 100
f <- function(x,y){(x+y)/8}
install.packages("cubature")
library(cubature)
adaptIntegrate(f,lowerLimit = c(0,0),upperLimit=c(1,2))
f <- function(x,y){(x+y)/8}
adaptIntegrate(f,lowerLimit = c(0,0),upperLimit=c(1,2))
f <- function(x){(x[1]+x[2])/8}
adaptIntegrate(f,lowerLimit = c(0,0),upperLimit=c(1,2))
adaptIntegrate(f,lowerLimit = c(0,1),upperLimit=c(1,2))
adaptIntegrate(f,lowerLimit = c(0,0),upperLimit=c(2,1))
0.25+0.375
1/2+1/3
5/6
q()
(0.2+1)/(3*(0.1^2))
(0.2*(0.1)+(0.1)^2)/(3*(0.1^2))
(0.2*(0.05)+(0.05)^2)/(3*(0.1^2))
q()
0.025 + 0.01
0.96 - 0.025 + 0.01
0.01/(0.01+0.945)
a = 0.01/(0.01+0.945)
a*10000
1000-a*10000
25/2 - (7/2)^2
q()
15*0.4
2*5/24 - 0.4
2*5/24 - 9*0.0167
int <- function(x){(x^2)/2 - 5000*x}
(int(20000)-int(5000))/2000
(int(20000)-int(5000))/20000
integrand <- function(x){(x-5000)^2}
integrate(integrand,5000,20000)
integrate(integrand,5000,20000)/20000
a = integrate(integrand,5000,20000)
a
names(a)
a$value
a$value/20000
a$value/20000 - 5625^2
sqrt(a$value/20000 - 5625^2)
no127 <- function(x){pnorm(((x/200)-5625)/(4960.784/sqrt(200)))}
no127(1200000)-no127(1000000)
exp(-1.5)
1-exp(-1.5)
30*0.2
50*0.08
choose(10,2)*choose(70,3)/choose(80,5)
exp((1-1.1^40)/1000)
a = exp((1-1.1^40)/1000)
b = exp((1-1.1^50)/1000)
(a-b)/a
5000*((a-b)/a)
ex136 <- function(p){
(2*p-2*p^2+p^3)/((1-p)^2)}
ex136(5/6)
ex136(5/6)/6
ex136(5/6)/6 + 1/5
ex136 <- function(p){
(2*p+p^3)/((1-p)^2)}
ex136(5/6)/6 + 1/5
20/3 + 1/5
ex136 <- function(p){
(3*p^2-2*p^3)/(p*((1-p)^2))}
ex136(5/6)
ex136 <- function(p){
(3*p-2*p^2)/(p*((1-p)^2))}
ex136(5/6)
(3*p-2*p^2)/((1-p)^2))}
(3*p-2*p^2)/((1-p)^2)}
ex136 <- function(p){
(3*p-2*p^2)/((1-p)^2)}
ex136(5/6)
40/6
40/6 + 1/5
gpa <- function(r){ 3.695334-.31835*r}
gpa(2)
gpa(2)-2.115
0.3^2
q()
gpa(2)
q()
pchisq(1,4)
pchisq
pchisq(106.955,4)
pchisq(106.955,4,lower.tail=F)
exit()
q()
A = matrix(c(1,1/2,1/3,1/2,1/3,1/4,1/3,1/4,1/5),nrow = 3)
A
b = c(exp(1)-1,1,exp(2)-1)
solve(A,b)
a = solve(A,b)
b = c(exp(1)-1,1,exp(1)-2)
a = solve(A,b)
a
t = seq(0,1,length=200)
xhat = a[1] + a[2]*t + a[3]*t^2
x = exp(t)
plot(t,x)
plot(t,x, type = 'l', col = 1)
lines(t,xhat, col = 2)
expression
q()
```{r comparison2, cache=FALSE}
seq(0.001,0.7,length = number)
seq(0.001,0.7,length = 50)
seq(0.001,0.7,length = 40)
q()
q()
y
q()
y
81*60+41
1*3600 + 40*60 + 9
q()
pnorm(1)
1-pnorm(2)
pnorm(1,1,4)
1-pnorm(-2,1,4)
pnorm(-2,1,4)
pnorm(1.5)
pnorm(-2,1,2)
1-pnorm(-2,1,2)
f <- function(t){exp(t)+2}
f(1)
3*(2^2)*(3^2)
6*(2^2)*(3)
q()
sqqr <- function(x){x^2}
sqqr(2)
lapply(1:2,sqqr)
sqqr <- function(x,y){(x+y)^2}
lapply(1:2,sqqr,y=2)
lapply(1:2,sqqr,y=0)
q()
1:9
mean(1:9)
mean(0:9)
q()
x = c(1,0,0.5,0,1)
sd(x)
x = c(0,0.5,0.5,0.5,1)
sd(x)
x = c(1,0.5,0.5,0,1)
sd(x)
4.31-3.14
mc <- function(x,y){(x-y)/sqrt(x+y)}
mc(25,17)
mc(5,27)
mc(10,28)
mc(18,46)
mc(16,22)
mc(14,35)
mc(15,46)
mc(26,22)
mc(5,33)
mc(25,17)
mc(20,16)
mc(15,17)
pooled <- function(p1,n1,p2,n2){(p1+p2)/(n1+n2)}
pooled(21,151,35,113)
pooled2 <- function(n1,p1,n2,p2){(p1+p2)/(n1+n2)}
pooled2(778,274,678,426)
pooled2(123,49,120,65)
pooled2(776,330,678,238)
pooled2(1054,361,907,285)
pooled2(151,21,83,16)
pooled2(227,47,248,50)
pooled2(121,99,121,93)
pooled2(221,93,252,39)
pooled2(221,36,252,39)
pooled2(202,93,228,79)
pooled2(207,85,1071,42)
pooled2(121,63,120,60)
rr <- function(n1,p1,n2,p2){(p1/n1)/(p2/n2)}
rr(12,240,6,215)
1/rr(12,240,6,215)
rr(15,300,6,295)
1/rr(15,300,6,295)
rr <- function(p1,n1,p2,n2){(p1/n1)/(p2/n2)}
rr(15,300,6,295)
rr(6,50,2,45)
rr(10,300,12,425)
rr(3,150,4,175)
rr(3,200,4,225)
rr(8,300,9,325)
rr(10,300,3,200)
rr(4,50,2,45)
rr(2,50,4,75)
rr(10,330,9,425)
rr(20,500,18,200)
qt(24,0.975)
qt(0.975,24)
qt(0.975,20)
qt(0.975,12)
qt(0.975,11)
qt(0.975,19)
qt(0.975,11)
qt(0.975,11)
qt(0.975,19)
qt(0.975,16)
qt(0.975,9)
7*320
1-qnorm(2.9)
1-pnorm(2.9)
1-pnorm(2.7)
1-pnorm(2.3)
x = c(1,0.5,0.5,0,1)
sd(x)/sqrt(5)
x = c(0,0.5,0.5,0.5,1)
sd(x)/sqrt(5)
x = c(1,0,0.5,0,1)
sd(x)/sqrt(5)
q()
a = 'abcdef'
a[1]
a[2]
q()
p<- 20
N<- 100
library(MASS)
X <- mvrnorm(n=N,mu=rep(0,p),Sigma = diag(p))
kappa(X)
P <- diag(runif(p,1,30))
P
kappa(X%*%P)
runif(p,1,30)
seq(1,30,length=p)
0.0001
q()
pbinom(1,2,.5)
pbinom(0,2,.5)
dbinom(0,2,.5)
dbinom(1,2,.5)
(1-pbinom(1,3,.15))+(1-pbinom(1,3,.15))*(dbinom(1,3,.15))
(1-pbinom(1,3,.15))+(1-pbinom(0,3,.15))*(dbinom(1,3,.15))
(1-pbinom(1,3,.20))+(1-pbinom(0,3,.20))*(dbinom(1,3,.20))
(1-pbinom(1,3,.20))+(1-pbinom(1,3,.20))*(dbinom(1,3,.20))
(1-pbinom(1,3,.20))+(1-pbinom(0,3,.20))*(dbinom(1,3,.20))
a = (1-pbinom(1,3,.20))+(1-pbinom(0,3,.20))*(dbinom(1,3,.20))
a/(1-0.186)
(1-pbinom(1,3,.25))+(1-pbinom(0,3,.25))*(dbinom(1,3,.25))
a = (1-pbinom(1,3,.20))+(1-pbinom(0,3,.20))*(dbinom(1,3,.20))
1
a
a - 0.237
a/0.237
q()
ibrary(MASS)
soft_threshold <- function(x, lambda){
sign(x)*max(abs(x) - lambda, 0)
}
Tj <- function(j, A, x, lambda){
soft_threshold(-2*sum(A[-j,j] * x[-j]), lambda)/(2*A[j,j])
}
Tk <- function(k, A, x){
sum_term = sum(A[-k, k]*x[-k])
return((-sum_term + sqrt(sum_term^2 + 4*A[k,k]))/(2*A[k,k]))
}
A = matrix(1:16,4,4)
x = 1:4
h(k,x,A,2,0.0001,10,converged=FALSE)
k
Tj(1,A,x,2)
A
A = matrix(1:16,4,4,byrow=TRUE)
Tj(1,A,x,2)
Tj(2,A,x,2)
Tj(3,A,x,2)
Tk(4,A,x)
h(k,x,A,2,0.0001,10,converged=FALSE)
qnorm(0.25,0,1
)
qnorm(0.75,0,1
)
qnorm(0.76,0,1)
qnorm(0.24,0,1)
qt(0.24,0,1,12)
qt(0.24,12,0,1)
qt(0.76,12,0,1)
exit()
q()
1-0.186
pbinom(8,size=12,prob=0.2)
pbinom(8,size=12,prob=0.1)
pbinom(8,size=20,prob=0.1)
pbinom(8,size=20,prob=0.2)
pbinom(8,size=20,prob=0.3)
pbinom(8,size=20,prob=0.25)
pbinom(8,size=20,prob=0.26)
pbinom(8,size=20,prob=0.23)
pbinom(8,size=20,prob=0.24)
pbinom(8,size=20,prob=0.75)
pbinom(8,size=20,prob=0.5)
pbinom(8,size=20,prob=0.49)
pbinom(8,size=20,prob=0.51)
library(binom)
install.packages("binom")
binom.confint(8,20,methods = "all")
library(binom)
binom.confint(8,20,methods = "all")
binom.confint(8,20,conf.level=0.95,methods = "all")
pbinom(8,size=20,prob=0.1912)
pbinom(8,size=20,prob=0.6395)
pbinom(8,size=20,prob=0.51)
pbinom(8,size=20,prob=0.52)
pbinom(8,size=20,prob=0.53)
pbinom(8,size=20,prob=0.6)
pbinom(8,size=20,prob=0.7)
pbinom(8,size=20,prob=0.65)
pbinom(8,size=20,prob=0.62)
pbinom(8,size=20,prob=0.61)
pbinom(8,size=20,prob=0.63)
pbinom(8,size=20,prob=0.64)
pbinom(8,size=20,prob=0.2)
pbinom(8,size=20,prob=0.19)
pbinom(8,size=20,prob=0.21)
1-pbinom(7,size=20,prob=0.21)
1-pbinom(7,size=20,prob=0.22)
1-pbinom(7,size=20,prob=0.19)
1-pbinom(7,size=20,prob=0.20)
exit
q()
library(binom)
binom.confint(8,20,conf.level=0.95,methods = "all")
q()
q()
as.Date("1/1/1970",format=%m/%d/%Y)
library(forecast)
install.packages("forecast")
library(forecast)
myts <- ts(myvector, start=c(2002, 1, 1), end=c(2002, 12, 31), frequency=1)
q()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(pracma)
library(forecast)
library(chron)
library(dplyr)
library(xts)
library(reshape2)
library(ggplot2)
library(lassoshooting)
library(caret)
source('holidays.r')
source('CSCS2.r')
predict.mean <- function(x1,mu,Sigma){
p1 <- length(x1)
p <- length(mu)
p2 <- p-p1
mu1 <- mu[1:p1]
mu2 <- mu[(p1+1):p]
Sigma11 <- Sigma[1:p1,1:p1]
Sigma21 <- Sigma[(p1+1):p,1:p1]
x2 <- mu2 + Sigma21%*%solve(Sigma11,x1-mu1)
return(x2)
}
months = format(ISOdate(1999,1:12,1),"%B")
months = tolower(months)
data = read.table("january.txt",header=TRUE)
for(month in months[-1]){
data = rbind(data,read.table(paste(month,".txt",sep=""),header=TRUE))
}
head(data,n = 6)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(pracma)
library(forecast)
library(chron)
library(dplyr)
library(xts)
library(reshape2)
library(ggplot2)
library(lassoshooting)
library(caret)
source('holidays.r')
source('CSCS2.r')
predict.mean <- function(x1,mu,Sigma){
p1 <- length(x1)
p <- length(mu)
p2 <- p-p1
mu1 <- mu[1:p1]
mu2 <- mu[(p1+1):p]
Sigma11 <- Sigma[1:p1,1:p1]
Sigma21 <- Sigma[(p1+1):p,1:p1]
x2 <- mu2 + Sigma21%*%solve(Sigma11,x1-mu1)
return(x2)
}
months = format(ISOdate(1999,1:12,1),"%B")
months = tolower(months)
data = read.table("january.txt",header=TRUE)
for(month in months[-1]){
data = rbind(data,read.table(paste(month,".txt",sep=""),header=TRUE))
}
head(data,n = 6)
data = filter(data, outcome=="AGENT") ### keeping only agent outcome, rest are hangups or transforms(?!?)
data = select(data,date,vru_entry) ### only interested in date and vru entry. disccarding all other columns
data$timedate = paste(data$date,data$vru_entry)
data$timedate = strptime(data$timedate,format='%y%m%d %H:%M:%S') ### converting to R date format
tt = seq(from = ISOdate(1999,1,1,0,0,0,tz = "EST"), to = ISOdate(1999,12,31,0,0,0,tz = "EST"), by = "10 min") ### creating 10 minute chunks
data$timeperiods = cut(data$timedate, breaks = tt) ### dividing up calls accoridn to 10 minute chunks
data$periods <- sapply(strsplit(as.character(data$timeperiods) , " "), "[" , 2) ### keeping only the time period. date discarded
data$timeperiods <- as.character(data$timeperiods)
data$count <- as.numeric(ave(data$timeperiods, data$timeperiods, FUN = length)) ### creating a column with counts of how many calls were received in a certain time period
data2 = select(data,date,periods,count) ### keeping only relevant columns such as date, periods and counts.
data_wide <- reshape(data2,
timevar = "periods",
idvar = c("date"),
direction = "wide")
data_wide[is.na(data_wide)] = 0
data_wide = data_wide[ , order(names(data_wide))]
getwd()
setwd("/Users/syedrahman/Documents/Spring2017/CholeskyPaper1")
library(Rcpp)
sourceCpp("fillgraph")
sourceCpp("fillgraph.cpp")
sourceCpp("fillgraph.cpp")
chol(S)
q()
y
